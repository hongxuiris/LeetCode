# 1122. Relative Sort Array

# Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.
# Sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2.  Elements that 
# don't appear in arr2 should be placed at the end of arr1 in ascending order.

# Constraints:
# arr1.length, arr2.length <= 1000
# 0 <= arr1[i], arr2[i] <= 1000
# Each arr2[i] is distinct.
# Each arr2[i] is in arr1.


# solution 1
class Solution:
    def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:
        d = collections.defaultdict(int)
        for num in arr1:
            d[num] += 1
        res = []
        for n in arr2:
            res.extend([n] * d[n])
            d[n] = 0
        res2 = []
        for i in range(1001):
            if d[i] >0 :
                res2.extend([i] * d[i])  # faster than append to res
        return res + res2     # return res.extend(res2) doesn't work



# solution 2, use list to count numbers
class Solution:
    def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:
        d = [0] * 1001
        for num in arr1:
            d[num] += 1
        res = []
        for n in arr2:
            res.extend([n] * d[n])
            d[n] = 0
        for i in range(1001):
            if d[i] > 0:
                res.extend([i] * d[i])
                
        return res



# Hong's answer
class Solution:
    def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:
        d = collections.defaultdict(int)
        cmp = []
        res = []
        for num in arr1:
            if num in arr2:
                d[num] += 1
            else:
                cmp.append(num)
        for n in arr2:
            res.extend([n] * d[n])
        cmp.sort()
        res.extend(cmp)
        
        return res

